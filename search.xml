<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>LaTex 模板</title>
    <url>/2022/01/24/LaTex/latex/</url>
    <content><![CDATA[<h1 id="LaTeX-模板"><a href="#LaTeX-模板" class="headerlink" title="LaTeX 模板"></a>LaTeX 模板</h1><p>因为LaTeX在完成论文等工作时排版比较容易，但是入门难度比较高，在入门LaTeX约一年后，我准备整理一下所获取的LaTeX信息，构建属于自己的模板。</p>
<p>模板采用分文件的方式，使作者更专注于自己的书写内容，为更好的支持中文，使用<code>xelatex</code>编译，目前已经测试通过，除却LaTeX的基础功能之外，本模板包括的功能如下：</p>
<ul>
<li>添加<code>pdf</code>作为封面</li>
<li>参考文献功能</li>
<li>…</li>
</ul>
<h1 id="模板文件"><a href="#模板文件" class="headerlink" title="模板文件"></a>模板文件</h1><p>模板文件如下所示，可以下载使用：</p>
<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p><code>main.tex</code>是主文件，如下：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="meta">% !TEX program = xelatex</span></span><br><span class="line"><span class="keyword">\documentclass</span>[UTF8, a4paper, 12pt]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;fancyhdr&#125;</span><br><span class="line"><span class="keyword">\ctexset</span>&#123;section = &#123;format=&#123;<span class="keyword">\Large</span><span class="keyword">\bfseries</span>&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>[left=1in, right=1in, top=1in, bottom=1in]&#123;geometry&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;listings&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;subcaption&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;subfiles&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;fontspec&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>[hidelinks]&#123;hyperref&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;cite&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;url&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;enumitem&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;ulem&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;pdfpages&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\pagestyle</span>&#123;fancy&#125;</span><br><span class="line"><span class="comment">% \fancyhf&#123;&#125;</span></span><br><span class="line"><span class="comment">% \fancyhead[R]&#123;\leftmark&#125;</span></span><br><span class="line"><span class="comment">% \fancyhead[L]&#123;\rightmark&#125;</span></span><br><span class="line"><span class="keyword">\setlength</span>&#123;<span class="keyword">\headheight</span>&#125;&#123;14.5pt&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\setlength</span>&#123;<span class="keyword">\arrayrulewidth</span>&#125;&#123;0.5mm&#125;</span><br><span class="line"><span class="keyword">\setlength</span>&#123;<span class="keyword">\tabcolsep</span>&#125;&#123;18pt&#125;</span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\arraystretch</span>&#125;&#123;1.5&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\graphicspath</span>&#123; &#123;./img/&#125; &#125;</span><br><span class="line"><span class="keyword">\input</span>&#123;color.tex&#125;</span><br><span class="line"><span class="keyword">\input</span>&#123;style.tex&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\lstset</span>&#123;style=mystyle&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">%==================================%</span></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\textbf</span>&#123;<span class="keyword">\LaTeX</span> 模板&#125; <span class="keyword">\\</span> &#123;<span class="keyword">\small</span> 简单的<span class="keyword">\LaTeX</span> 模板&#125;&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Author&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="comment">% add custom cover</span></span><br><span class="line"><span class="comment">% \includepdf[pages=&#123;1&#125;]&#123;cover.pdf&#125;</span></span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\newpage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>&#123;Part 1&#125;</span><br><span class="line"><span class="keyword">\subfile</span>&#123;part.tex&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% \bibliographystyle&#123;unsrt&#125;</span></span><br><span class="line"><span class="comment">% \bibliography&#123;refs&#125;</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<h2 id="color"><a href="#color" class="headerlink" title="color"></a>color</h2><p><code>color.tex</code>是关于颜色的定义，在诸如定义代码样式时可以使用：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;xcolor&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;codegreen&#125;&#123;rgb&#125;&#123;0,0.6,0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;codegray&#125;&#123;rgb&#125;&#123;0.5,0.5,0.5&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;codepurple&#125;&#123;rgb&#125;&#123;0.58,0,0.82&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;backcolour&#125;&#123;rgb&#125;&#123;0.95,0.95,0.92&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;seabornBlue&#125;&#123;RGB&#125;&#123;76,114,176&#125;</span><br><span class="line"><span class="comment">% colors</span></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;white&#125;&#123;rgb&#125;&#123;1,1,1&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;black&#125;&#123;rgb&#125;&#123;0,0,0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;middlegray&#125;&#123;rgb&#125;&#123;0.5,0.5,0.5&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;lightgray&#125;&#123;rgb&#125;&#123;.95,.95,.95&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;arsenic&#125;&#123;rgb&#125;&#123;0.23, 0.27, 0.29&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;arsenicLight&#125;&#123;rgb&#125;&#123;0.20, 0.20, 0.20&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;darkgray&#125;&#123;rgb&#125;&#123;.4,.4,.4&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;purple&#125;&#123;rgb&#125;&#123;0.65, 0.12, 0.82&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;orange&#125;&#123;rgb&#125;&#123;0.8,0.3,0.3&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;yac&#125;&#123;rgb&#125;&#123;0.6,0.6,0.1&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;green&#125;&#123;rgb&#125;&#123;.2,0.6,0.3&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;azure&#125;&#123;rgb&#125;&#123;0.0, 0.5, 1.0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;editorGray&#125;&#123;rgb&#125;&#123;0.95, 0.95, 0.95&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;editorOcher&#125;&#123;rgb&#125;&#123;1, 0.5, 0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;editorGreen&#125;&#123;rgb&#125;&#123;0, 0.5, 0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;orange&#125;&#123;rgb&#125;&#123;1,0.45,0.13&#125;		</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;olive&#125;&#123;rgb&#125;&#123;0.17,0.59,0.20&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;brown&#125;&#123;rgb&#125;&#123;0.69,0.31,0.31&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;purple&#125;&#123;rgb&#125;&#123;0.38,0.18,0.81&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;lightblue&#125;&#123;rgb&#125;&#123;0.1,0.57,0.7&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;lightred&#125;&#123;rgb&#125;&#123;1,0.4,0.5&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;vscodered&#125;&#123;HTML&#125;&#123;E53935&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;vscodelightred&#125;&#123;HTML&#125;&#123;EF5350&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;vscodeblue&#125;&#123;HTML&#125;&#123;1565C0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;vscodegreen&#125;&#123;HTML&#125;&#123;66BB6A&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;lightblack&#125;&#123;HTML&#125;&#123;212121&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;darkraspberry&#125;&#123;rgb&#125;&#123;0.53, 0.15, 0.34&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% blue hues</span></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;bleudefrance&#125;&#123;rgb&#125;&#123;0.19, 0.55, 0.91&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;brandeisblue&#125;&#123;rgb&#125;&#123;0.0, 0.44, 1.0&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;blue(ncs)&#125;&#123;rgb&#125;&#123;0.0, 0.53, 0.74&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;coolblack&#125;&#123;rgb&#125;&#123;0.0, 0.18, 0.39&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">% red hues</span></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;coralred&#125;&#123;rgb&#125;&#123;1.0, 0.25, 0.25&#125;</span><br><span class="line"><span class="keyword">\definecolor</span>&#123;darkred&#125;&#123;rgb&#125;&#123;0.55, 0.0, 0.0&#125;</span><br></pre></td></tr></table></figure>

<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>部分样式的定义：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% define some style</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% code style</span></span><br><span class="line"><span class="keyword">\lstdefinestyle</span>&#123;mystyle&#125;&#123;</span><br><span class="line">	language=C++,</span><br><span class="line">    backgroundcolor=<span class="keyword">\color</span>&#123;backcolour&#125;,   </span><br><span class="line">    commentstyle=<span class="keyword">\color</span>&#123;codegreen&#125;<span class="keyword">\textit</span>,</span><br><span class="line">    keywordstyle=<span class="keyword">\color</span>&#123;magenta&#125;<span class="keyword">\textbf</span>,</span><br><span class="line">    numberstyle=<span class="keyword">\scriptsize</span><span class="keyword">\fontspec</span>&#123;Consolas&#125;<span class="keyword">\color</span>&#123;codegray&#125;,</span><br><span class="line">    stringstyle=<span class="keyword">\color</span>&#123;codepurple&#125;,</span><br><span class="line">	identifierstyle=<span class="keyword">\color</span>&#123;vscodeblue&#125;,</span><br><span class="line">    basicstyle=<span class="keyword">\scriptsize</span><span class="keyword">\fontspec</span>&#123;Consolas&#125;,</span><br><span class="line">    escapeinside=``,</span><br><span class="line">    breakatwhitespace=false,         </span><br><span class="line">    breaklines=true,                 </span><br><span class="line">    captionpos=b,                    </span><br><span class="line">    keepspaces=true,                 </span><br><span class="line">    numbers=left,                    </span><br><span class="line">    numbersep=-13pt,                  </span><br><span class="line">    showspaces=false,                </span><br><span class="line">    showstringspaces=false,</span><br><span class="line">    showtabs=false,                  </span><br><span class="line">    tabsize=4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="part"><a href="#part" class="headerlink" title="part"></a>part</h2><p>章节分文件，为更好的组织文章：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[main.tex]&#123;subfiles&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\section</span>&#123;Part 2&#125;</span><br><span class="line">This is part 2.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>conda和pip换源</title>
    <url>/2024/03/04/Misc/conda%E5%92%8Cpip%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<h1 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h1><h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><p>配置文件<code>~/.condarc</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: <span class="literal">true</span></span><br><span class="line">default_channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查看已安装源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --show-sources</span><br></pre></td></tr></table></figure>

<p>清除索引缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda clean -i</span><br></pre></td></tr></table></figure>

<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><h3 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h3><p>修改配置文件<code>~/.pip/pip.conf</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.bfsu.edu.cn/pypi/web/simple</span><br><span class="line">format = columns</span><br><span class="line">trusted-host = mirrors.bfsu.edu.cn</span><br></pre></td></tr></table></figure>

<h3 id="命令方式"><a href="#命令方式" class="headerlink" title="命令方式"></a>命令方式</h3><p>临时使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package</span><br></pre></td></tr></table></figure>

<p>永久更新（需pip&gt;&#x3D;10.0.0）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>这个方式会将配置写入文件<code>~/.config/pip/pip.conf</code>，尚未测试两种配置同时使用的效果。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh密钥连接问题</title>
    <url>/2024/01/11/Misc/ssh%E5%AF%86%E9%92%A5%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="密钥连接问题"><a href="#密钥连接问题" class="headerlink" title="密钥连接问题"></a>密钥连接问题</h1><p>在使用ssh连接时，注意到可以使用密码连接，但是密钥连接失效，如果下面命令连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -o PasswordAuthentication=no user@hostname</span><br></pre></td></tr></table></figure>

<p>出现<code>Permission denied (publickey,password)</code>错误，这个错误表明某处权限出现问题，但可惜我并未及时注意到。</p>
<h1 id="ssh调试"><a href="#ssh调试" class="headerlink" title="ssh调试"></a>ssh调试</h1><p>苦经尝试，终于发现一种<a href="https://blog.csdn.net/wcjlyj/article/details/124148603">ssh调试</a>的方法，记录如下：</p>
<ul>
<li><p>服务器端输入：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/sbin/sshd -p 10022 -d</span><br></pre></td></tr></table></figure>

<p>  <code>-d</code>表示开启调试模式。</p>
</li>
<li><p>客户端输入：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -v usename@ip -p 10022</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这样，便可以详细输出连接细节，包括了详细的错误信息。</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>经过调试发现，问题出现在<code>authorized_keys</code>文件的权限，虽然在此之前已经有博客说明这个问题，但并未重视，为此，需学习一下<strong>Linux文件权限</strong>的知识。当然，了解这种调试的思想更为宝贵，出现问题之后应该考虑<strong>日志以及调试方法</strong>。</p>
<p>最后，还有一个问题：<strong>谁动了文件权限？！！</strong></p>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>lab-xxx服务器配置说明</title>
    <url>/2024/03/21/Misc/lab-193%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="xxx服务器说明"><a href="#xxx服务器说明" class="headerlink" title="xxx服务器说明"></a><code>xxx</code>服务器说明</h1><blockquote>
<p>个人配置记录，不足为外人道也，故隐去IP等，写为x</p>
</blockquote>
<h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>用户<strong>必须</strong>在<code>labxxx</code>组中，才可以进行ssh连接，<strong>推荐使用密钥连接方式</strong>.</p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>在<code>/usr/local/etc/useradd.d</code>目录下，有创建用户的脚本，将新用户添加至<code>name.list</code>文件中，运行脚本即可，默认将用户加入管理员组和<code>labxxx</code>组中.</p>
<p>如果手动添加用户，<strong>若需要ssh连接，请将用户附加到<code>labxxx</code></strong>.</p>
<h2 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h2><p>处于安全需求，引入此组件，可以一定程度上防止ssh爆破攻击，此组件会封禁持续尝试进行ssh连接的IP.</p>
<p>封禁配置在<code>/etc/fail2ban/jail.conf</code>中，简单修改了封禁规则的参数，如果<strong>IP多次连接失败，会封禁</strong>10min.</p>
<p>查看封禁状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fail2ban-client status sshd</span><br></pre></td></tr></table></figure>

<p>解除IP封禁：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fail2ban-client <span class="built_in">set</span> sshd unbanip 10.xx.xx.xx</span><br></pre></td></tr></table></figure>

<h2 id="显卡驱动与cuda"><a href="#显卡驱动与cuda" class="headerlink" title="显卡驱动与cuda"></a>显卡驱动与cuda</h2><blockquote>
<p>2024&#x2F;07&#x2F;22 更新显卡硬件，升级了驱动，本部分内容有所更新，另特别记录：<strong>A6000需要<code>8+8</code>的供电！！！目前服务器的供电线为2组<code>6+2+6</code></strong></p>
</blockquote>
<p><del>显卡驱动为<code>550</code>版本，非必要不升级。</del>显卡驱动版本<code>555</code>.</p>
<p>cuda为<code>12.1</code>版本，截至<code>2024/03/21</code>，最新版本已经是<code>12.4</code>，但是考虑到<code>pytorch</code>官网支持的cuda最新版本为<code>12.1</code>，故保持不变，考虑当前主机<code>apt源</code>已经包含cuda，为防止apt升级命令影响cuda，所以将这些包设置为<code>hold</code>状态，可以通过下面命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-mark showhold</span><br></pre></td></tr></table></figure>

<p>当然，可以手动升级.</p>
<blockquote>
<p>更新：针对cuda的<code>hold</code>设置已经解除，<code>hold</code>可能会影响到nvidia驱动的更新，但是仍旧不建议非必要升级cuda，<strong>尤其是超过<code>torch</code>官方所支持的最新cuda版本</strong>.</p>
</blockquote>
<p>另外，cuda在安装时需要手动将路径加入环境变量，为了针对所有用户生效，在<code>/etc/profile.d/cuda_path.sh</code>中已经设置了变量，单个用户无需设置，具体可查看此文件，这个设置是为了<strong>满足<code>torch</code>官方的要求</strong>，当然也可以使用切换软链接的方式.</p>
<h1 id="关于重装系统"><a href="#关于重装系统" class="headerlink" title="关于重装系统"></a>关于重装系统</h1><h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><p>一般情况下，重装系统只会导致系统盘数据丢失，所以外挂磁盘数据<strong>理论</strong>是可以保留，如果是物理磁盘，只需<code>umount</code>即可。但是对于<code>lvm</code>格式卷，一定需要注意逻辑卷组之间的联系，<strong>尤其是要解除和系统盘之间的联系</strong>，重装系统之后，恢复<code>lvm</code>的数据，可以上网搜索，大致指令应该是使用<code>pvscan</code>扫描恢复.</p>
<h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><p>开机按<code>DEL</code>键，进入BIOS，使用启动盘重装系统.</p>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p>系统重装时，会要求配置网关，注意记录原服务器网络配置，现将193配置记录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 外网网卡</span><br><span class="line">auto ens5f0</span><br><span class="line">iface ens5f0 inet static</span><br><span class="line">address xx.xx.xx.xx</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway xx.xx.xx.254</span><br><span class="line"># 内网网卡</span><br><span class="line">auto ens7f1</span><br><span class="line">iface ens7f1 inet static</span><br><span class="line">address 10.0.101.193</span><br><span class="line">netmask 255.255.0.0</span><br></pre></td></tr></table></figure>

<p>最好也设置一下DNS服务器，比如<code>8.8.8.8/114.114.114.114</code>，以方便连接外网.</p>
<h2 id="移除U盘重启"><a href="#移除U盘重启" class="headerlink" title="移除U盘重启"></a>移除U盘重启</h2><p>移除U盘重启后，可能在网络检查会花费一定时间，等待即可，最后，会停在<code>reached target...</code>，如果时间过长，按一下键盘，可能会有意外之喜.</p>
]]></content>
  </entry>
  <entry>
    <title>opencv问题记录</title>
    <url>/2024/06/19/Misc/opencv%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>opencv在安装使用的过程中，有很多的问题出现，现记录如下：</p>
<h1 id="Linux-python版本"><a href="#Linux-python版本" class="headerlink" title="Linux python版本"></a>Linux python版本</h1><p>下面讨论的安装环境为服务器版的Linux，并不带图形界面，将会尝试安装<strong>python</strong>版本的<strong>opencv</strong>，环境使用<strong>conda</strong>创建.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>python版opencv的安装有全局和局部的安装，全局使用Linux包管理器，比如<code>apt</code>等管理，此方式还未尝试，日后若有使用，再做记录，现讨论局部安装，即在conda环境下安装opencv。</p>
<p>使用<code>conda install</code>命令安装的opencv，在索引补全上存在问题（<em>conda测试安装版本为4.7，其他版本不保证</em>)，故<strong>推荐使用pip</strong>安装，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install opencv-python</span><br></pre></td></tr></table></figure>

<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><blockquote>
<p>opencv可不止一个坑！！！</p>
</blockquote>
<blockquote>
<p>这里先说结论：如果只需要使用opencv提供的算法等函数，并不调用显示查看的函数，上面的安装并没有问题，但是如果<strong>在无GUI的Linux服务器</strong>上尝试调用<code>imshow</code>等显示函数，会出现这些问题。<strong>推荐的解决方式是放弃这个函数，使用其他方式，比如matplotlib等来查看。</strong>否则，无异于浪费生命！</p>
</blockquote>
<p>先使用一个简单的测试程序，验证opencv显示函数是否可以成功运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./img.xxx&#x27;</span>, flags=<span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;demo&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>没有出现正常的图片显示，或者出现图片控制台输出有问题，继续如下：</p>
<h3 id="opencv-headless与contrib"><a href="#opencv-headless与contrib" class="headerlink" title="opencv-headless与contrib"></a>opencv-headless与contrib</h3><p>脚本命令<code>python file.py</code>命令运行，出现下面问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenCV(4.9.0) /io/opencv/modules/highgui/src/window.cpp:1272: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function &#x27;cvShowImage&#x27;</span><br></pre></td></tr></table></figure>

<p>这是由于安装的opencv并非满血版本导致，可以尝试使用如下命令解决，<a href="https://stackoverflow.com/questions/67120450/error-2unspecified-error-the-function-is-not-implemented-rebuild-the-libra">来源链接</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall opencv-python-headless -y</span><br><span class="line">pip install opencv-python --upgrade</span><br></pre></td></tr></table></figure>

<p><code>opencv-python-headless</code>是<strong>一个不带图形界面的版本的OpenCV</strong>，它可以用来进行图像处理和计算机视觉任务，但是不能用来显示图像或视频，这也解释了为什么上面的代码会出现问题。</p>
<p>另外，结合<a href="https://stackoverflow.com/questions/50783177/opencv-the-function-is-not-implemented-rebuild-the-library-with-windows/52575640#52575640">stackoverflow的回答</a>，也可以使用如下安装命令解决问题：</p>
<blockquote>
<p><strong>两个都是stackoverflow的认证回答，两者应该都是补充安装opencv其他部分</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opencv-python</span><br><span class="line">pip install opencv-contrib-python </span><br></pre></td></tr></table></figure>

<p>其中，<code>opencv-contrib</code>是加强版opencv，除了主模块，还包括一些增强模块以及测试的新算法，验证成熟之后，再加入主模块，算是有社区支持。</p>
<h3 id="QT报错"><a href="#QT报错" class="headerlink" title="QT报错"></a>QT报错</h3><p>上面问题解决之后，再次运行程序，在无<code>X Forward</code>的终端下，错误信息应该会<strong>再次升级</strong>，出现<code>core dumped</code>，在vscode jupyter中，这个问题表现为<code>kernel dead</code>，脚本运行可能报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qt.qpa.xcb: could not connect to display </span><br><span class="line">qt.qpa.plugin: Could not load the Qt platform plugin &quot;xcb&quot; in &quot;/home/user/miniconda3/envs/CV/lib/python3.9/site-packages/cv2/qt/plugins&quot; even though it was found.</span><br><span class="line">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.</span><br><span class="line"></span><br><span class="line">Available platform plugins are: xcb, eglfs, minimal, minimalegl, offscreen, vnc, webgl.</span><br><span class="line"></span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure>

<p>这个错误出现的原因很简单，无GUI的服务器怎么可能运行图形化的程序，解决方式是<strong>开启X11转发</strong>，可能需要服务器安装Gtk等，<strong>实现转发最容易的方式是使用mobaxterm这种带有X11的软件</strong>。</p>
<p><img src="https://raw.githubusercontent.com/yuanyangwangTJ/Picture/master/img/202406191854572.png" alt="image-20240619185113758"></p>
<h3 id="QT版本兼容性"><a href="#QT版本兼容性" class="headerlink" title="QT版本兼容性"></a>QT版本兼容性</h3><p>即使走到这一步，也依旧有可能遇到问题，程序可以运行，图像也显示，但是终端打印如下的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QObject::moveToThread: Current thread (0x23f5ac0) is not the object&#x27;s thread (0x24e4ca0).</span><br><span class="line">Cannot move to target thread (0x23f5ac0)</span><br></pre></td></tr></table></figure>

<p>搜索发现，这个问题是因为QT和opencv版本之间不兼容导致的，但是很遗憾，还未找到解决方案，网上有建议对opencv进行降级处理，但最终也没有找到合适的对应版本。</p>
<h2 id="opencv显示图片"><a href="#opencv显示图片" class="headerlink" title="opencv显示图片"></a>opencv显示图片</h2><p>既然使用<code>imshow</code>显示，是在浪费生命，那么下面给出可用的显示图片方案，<a href="https://stackoverflow.com/a/47821222">参考链接</a>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;path_to_image&#x27;</span>)</span><br><span class="line"><span class="comment"># plt.imshow(img, cmap = &#x27;gray&#x27;, interpolation = &#x27;bicubic&#x27;)</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.xticks([]), plt.yticks([])  <span class="comment"># to hide tick values on X and Y axis</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>这样，便可以正常查看图片了，<strong>有一种兜兜转转回原地的感觉</strong>？！</p>
]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker与深度学习环境</title>
    <url>/2024/07/23/Docker/Docker%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker 镜像是一个描述容器如何运行的的文件，Docker 容器是 Docker 镜像在运行或被终止时的一个阶段。容器和主机上的其他文件是隔离的。当我们运行一个 Docker 容器的时候，它会使用一个被隔离出来的文件系统，这个文件系统是由一个 Docker 镜像提供的。Docker 镜像包含了运行应用程序所需要的一切东西——所有的依赖、配置、脚本、二进制文件等等。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在ubuntu上安装docker，<a href="https://docs.docker.com/engine/install/ubuntu/">官方安装教程</a>。</p>
<p>考虑国内网络问题，设置<code>apt</code>的时候可以使用其他源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加软件源GPG密钥</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向sources.list添加Docker软件源</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Group"><a href="#Docker-Group" class="headerlink" title="Docker Group"></a>Docker Group</h2><p>Docker Group是Linux系统中的一个用户组，其主要目的是为了方便管理员将普通用户加入到这个组中，从而赋予这些用户执行Docker命令的权限。当用户被添加到Docker Group后，他们就可以无需使用<code>sudo</code>命令来执行Docker命令，从而提高了操作效率。</p>
<p>默认情况下，Docker 在安装过程中会创建一个名为 docker 的用户组，用于管理 Docker 容器。</p>
<p>查看如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getent group docker</span><br></pre></td></tr></table></figure>

<p>不存在可以创建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>

<p>将当前用户添加至用户组并更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure>

<p>如果未生效，可以退出当前终端并重新登录。</p>
<h2 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h2><blockquote>
<p><a href="https://blog.csdn.net/peng2hui1314/article/details/124267333">快速设置 Docker 的三种网络代理配置</a></p>
<p><a href="https://docs.docker.com/config/daemon/proxy/#httphttps-proxy">官方代理配置文档</a></p>
</blockquote>
<h3 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a>Docker Client</h3><p>关于docker的镜像加速问题，<strong>推荐使用代理方式，使用官方镜像</strong>。以下为个人使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7891 http_proxy=http://127.0.0.1:7891 all_proxy=socks5://127.0.0.1:7891</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Daemon"><a href="#Docker-Daemon" class="headerlink" title="Docker Daemon"></a>Docker Daemon</h3><p>但是这样做依旧不够，docker这个程序只是一个控制台程序，用于attach，真正操作docker的是运行在后台的docker daemon，也就是我们需要通过<code>systemctl start docker</code>来启动docker daemon。所以说即使我们设置了环境变量http_proxy，那么也只是针对前台docker console使用，而真正访问pull镜像的确是后台的daemon，因此，需要设置daemon访问proxy：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>

<p>添加内容如下：</p>
<blockquote>
<p>HTTP_PROXY 用于代理访问 http 请求，HTTPS_PROXY 用于代理访问 https 请求，如果想某个 IP或域名不走代理则配置到 NO_PROXY中</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span><br></pre></td></tr></table></figure>

<p>最后刷新重启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>命令可以简化为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/systemd/system/docker.service.d/proxy.conf &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://127.0.0.1:7891&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://127.0.0.1:7891&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com,10.60.150.0/24&quot;</span></span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>可以使用如下命令检测Docker有没有使用代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure>

<p>这里存在一个问题，考虑到Linux多用户情况，如果不同用户需要配置不同代理，目前并无法实现，目前发现的可能解决方案为使用<code>rootless docker</code>，但是安装配置比较繁琐，后续再探索。</p>
<h3 id="Docker-Container"><a href="#Docker-Container" class="headerlink" title="Docker Container"></a>Docker Container</h3><p>对于容器内部代理访问，因为本身容器就可以当作简化版系统，可以通过在容器内设置环境变量的方式，<strong>但是并不推荐</strong>，这里使用<code>Docker 17.07</code>以及更高版本的全局配置方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.docker</span><br><span class="line"><span class="comment"># 创建编辑配置文件</span></span><br><span class="line">vim ~/.docker/config.json</span><br></pre></td></tr></table></figure>

<p>添加内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;proxies&quot;:</span><br><span class="line"> &#123;</span><br><span class="line">   &quot;default&quot;:</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;httpProxy&quot;: &quot;http://127.0.0.1:7891&quot;,</span><br><span class="line">     &quot;httpsProxy&quot;: &quot;http://127.0.0.1:7891&quot;,</span><br><span class="line">     &quot;noProxy&quot;: &quot;*.test.example.com,.example2.com,127.0.0.0/8&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h1 id="Docker深度学习项目环境"><a href="#Docker深度学习项目环境" class="headerlink" title="Docker深度学习项目环境"></a>Docker深度学习项目环境</h1><p>因为在多台机器上频繁部署深度学习环境，所以考虑使用Docker化深度学习环境和项目，目标是环境打包分享之后，只需要安装好显卡驱动就行。将其过程记录如下。</p>
<h2 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h2><p>项目的基础镜像可以选择从nvidia&#x2F;cuda进行构建，在此之上安装torch等，或者直接使用pytorch官方所提供的镜像，下面使用这种方式。</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull pytorch/pytorch:2.3.1-cuda12.1-cudnn8-runtime</span><br></pre></td></tr></table></figure>

<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --gpus all --name dp-env --hostname docker-pc pytorch/pytorch:2.3.1-cuda12.1-cudnn8-runtime /bin/bash</span><br></pre></td></tr></table></figure>

<p>可能出现的问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon: could not select device driver &quot;&quot; with capabilities: [[gpu]]</span><br></pre></td></tr></table></figure>

<p>这是因为没有安装<code>nvidia-docker</code>，安装按照<a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#installing-with-apt">nvidia官方文档</a>即可，完成之后重启docker服务。</p>
<h2 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h2><p>容器创建完成，后续便可以正常使用了，通过下面的命令直接进入交互模式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start -i dp-env</span><br></pre></td></tr></table></figure>

<p>经过测试发现，torch官方提供的基础环境中，系统为<code>ubuntu 22.04</code>，当然极其精简，可以安装将自己的环境个性化配置，保存为镜像，方便后续使用。</p>
<h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><blockquote>
<p><a href="https://yeasy.gitbook.io/docker_practice/repository/registry">docker配置私有仓库</a></p>
</blockquote>
<p>考虑到Docker hub公有仓库部分不便性，我们现在使用<code>docker-registry</code>来构建私有的镜像仓库。具体参考<a href="https://yeasy.gitbook.io/docker_practice/repository/registry">链接</a>即可。下面将配置命令记录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /home/shared/var/lib/registry:/var/lib/registry \</span><br><span class="line">    --restart=always --name registry registry</span><br></pre></td></tr></table></figure>

<h2 id="Docker容器打包"><a href="#Docker容器打包" class="headerlink" title="Docker容器打包"></a>Docker容器打包</h2><p>现在将上面创建的深度学习项目容器打包并上传。</p>
<p>命令：<code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p>
<p>options选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a :提交的镜像作者；</span><br><span class="line">-c :使用Dockerfile指令来创建镜像；</span><br><span class="line">-m :提交时的说明文字；</span><br><span class="line">-p :在commit时，将容器暂停。</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;fisrt commit&quot;</span> dp-env torch-pc:0.1</span><br></pre></td></tr></table></figure>

<h2 id="私有仓库上传、搜索、下载"><a href="#私有仓库上传、搜索、下载" class="headerlink" title="私有仓库上传、搜索、下载"></a>私有仓库上传、搜索、下载</h2><p>使用<code>docker tag</code>标记一个镜像，然后推送到它的仓库，格式为：</p>
<p><code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag torch-pc:0.1 10.60.150.193:5000/torch-pc:latest</span><br></pre></td></tr></table></figure>

<p>使用 <code>docker push</code> 上传标记的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push 10.60.150.193:5000/torch-pc:latest</span><br></pre></td></tr></table></figure>

<p>这里因为是内网地址作为私有仓库地址，Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制，在<code>/etc/docker/daemon.json</code>中配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [</span><br><span class="line">    &quot;10.60.150.193:5000&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用<code>curl</code> 查看仓库中的镜像:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 10.60.150.193:5000/v2/_catalog</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;repositories&quot;:[&quot;torch-pc&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>先删除已有镜像，再尝试从私有仓库中下载这个镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image <span class="built_in">rm</span> 10.60.150.193:5000/torch-pc:latest</span><br><span class="line">$ docker pull 10.60.150.193:5000/torch-pc:latest</span><br><span class="line">$ docker image <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="默认存储位置修改"><a href="#默认存储位置修改" class="headerlink" title="默认存储位置修改"></a>默认存储位置修改</h2><blockquote>
<p><a href="https://www.cnblogs.com/JasonCeng/p/15728592.html">修改docker的默认存储位置及镜像存储位置</a></p>
</blockquote>
<p>Docker的默认存储位置为：<code>/var/lib/docker</code>，可以通过下面命令查看具体位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker info | grep &quot;Docker Root Dir&quot;</span><br></pre></td></tr></table></figure>

<p>如果空间受限，最直接的方法是挂载分区到这个目录，考虑到管理需求，可以采用修改路径或者软连接的方式来实现。</p>
<p>首先停止Docker服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br><span class="line">sudo systemctl stop docker</span><br></pre></td></tr></table></figure>

<p>移动目录并连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /var/lib/docker /home/shared/var/lib/docker</span><br><span class="line">sudo <span class="built_in">ln</span> -s /home/shared/var/lib/docker /var/lib/docker</span><br></pre></td></tr></table></figure>

<h2 id="关于Docker用处"><a href="#关于Docker用处" class="headerlink" title="关于Docker用处"></a>关于Docker用处</h2><p>探索Docker的初衷是为了简化不同服务器之间环境的配置，但是发现即使使用Docker，<strong>如果环境经常发生变动</strong>，也很难拥有良好的体验。Docker也不推荐过度配置，使用ssh连接Docker虽然可行，但是又破环了Docker的设计理念，单纯使用Docker作为环境，对于开发时的自动补全等，体验有限，目前发现<strong>Pycharm</strong>可以加载镜像，或许结合<code>Dockerfile</code>可以获得不错的体验，当然需要将环境安装步骤写在<code>Dockerfile</code>中；而<strong>vscode</strong>提供了对于创建容器的连接方式，类似于远程开发。两种方式，孰优孰劣，很难论断。但无论如何，想要在一台空服务器上运行项目，Docker提供环境的方案还是值得一试。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh反向代理实现内网穿透</title>
    <url>/2024/08/03/Misc/ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="ssh反向代理"><a href="#ssh反向代理" class="headerlink" title="ssh反向代理"></a>ssh反向代理</h1><blockquote>
<p><a href="https://blog.csdn.net/winter2121/article/details/116048685">ssh反向代理实现内网穿透；ssh+nginx实现公网云服务器代理访问内网服务器</a></p>
<p><a href="https://blog.csdn.net/liuxingyuzaixian/article/details/128705262">ssh反向代理实现内网穿透【亲测可用】</a></p>
</blockquote>
<p>为实现在公网环境访问内网服务器，现通过<strong>ssh反向代理</strong>的方式，并配置开机自启动服务，步骤如下：</p>
<h1 id="内网服务器配置"><a href="#内网服务器配置" class="headerlink" title="内网服务器配置"></a>内网服务器配置</h1><h2 id="创建启动脚本"><a href="#创建启动脚本" class="headerlink" title="创建启动脚本"></a>创建启动脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /usr/local/bin/reverse-ssh-tunnel.sh</span><br></pre></td></tr></table></figure>

<p>内容如下，其中<code>public_user</code>表示公网服务器用户，<code>public_ip</code>表示公网服务器IP：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ssh -CNR 7777:localhost:22 -o ServerAliveInterval=60 public_user@public_ip</span><br></pre></td></tr></table></figure>

<p>如果手动启动，可以使用<code>ps aux | grep ssh</code>查看是否启动。</p>
<p>设置为可运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/reverse-ssh-tunnel.sh</span><br></pre></td></tr></table></figure>

<h2 id="创建systemd服务"><a href="#创建systemd服务" class="headerlink" title="创建systemd服务"></a>创建<code>systemd</code>服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/reverse-ssh-tunnel.service</span><br></pre></td></tr></table></figure>

<p>内容如下，注意<strong>用户名</strong>等信息替换：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Reverse SSH Tunnel</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/reverse-ssh-tunnel.sh</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line">User=你的用户名</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">StartLimitIntervalSec=500</span><br><span class="line">StartLimitBurst=5</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>配置启动服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> reverse-ssh-tunnel.service</span><br><span class="line">sudo systemctl start reverse-ssh-tunnel.service</span><br><span class="line"></span><br><span class="line">sudo systemctl status reverse-ssh-tunnel.service</span><br></pre></td></tr></table></figure>

<h1 id="公网服务配置"><a href="#公网服务配置" class="headerlink" title="公网服务配置"></a>公网服务配置</h1><p>对于公网服务器本身，可以不添加任何配置，登录公网服务器后，可以通过如下方式访问：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh secret_user@localhost -p 7777</span><br></pre></td></tr></table></figure>

<p>当然也可以通过<strong>跳板机</strong>的方式登录访问，如果想要一次性直接访问，提供以下两种方式;</p>
<h2 id="公网服务器正向代理"><a href="#公网服务器正向代理" class="headerlink" title="公网服务器正向代理"></a>公网服务器正向代理</h2><p>添加公网服务器正向代理，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -fCNL *:7778:localhost:7777 -o ServerAliveInterval=60 public_user@localhost -p 22</span><br></pre></td></tr></table></figure>

<p>上面配置的意思是让本机<code>7778</code>端口指向一个远端机器的<code>7777</code>端口，而这里的远端机器恰好就是公网服务器本身。当然，可以添加开机自启动服务，与上面类似。</p>
<p>访问如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh secret_user@public-ip -p 7778</span><br></pre></td></tr></table></figure>

<h2 id="ssh配置修改"><a href="#ssh配置修改" class="headerlink" title="ssh配置修改"></a>ssh配置修改</h2><blockquote>
<p><a href="https://www.ssh.com/academy/ssh/tunneling-example#remote-forwarding">https://www.ssh.com/academy/ssh/tunneling-example#remote-forwarding</a></p>
<p>By default, OpenSSH only allows connecting to remote forwarded ports from the server host. </p>
</blockquote>
<p>上面是无法直接跨公网连接内网服务器的原因，可以修改ssh配置文件<code>/etc/ssh/sshd_config</code>中选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>

<p>重启服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<p>不仅如此，<strong>内网服务器脚本的内容需要允许任何IP地址机器访问</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ssh -CNR *:7777:localhost:22 -o ServerAliveInterval=60 public_user@public_ip</span><br></pre></td></tr></table></figure>

<p>按照之前方式重启服务，这样就可以直接ssh登录访问了！</p>
<h1 id="网络与服务重启"><a href="#网络与服务重启" class="headerlink" title="网络与服务重启"></a>网络与服务重启</h1><blockquote>
<p><a href="https://unix.stackexchange.com/questions/725834/systemd-unit-auto-restart-when-network-changes">Systemd unit auto restart when network changes</a></p>
</blockquote>
<p>在网络不稳定的情况下，需要重启服务，下面考虑使用<code>NetworkManager-dispatcher</code>服务来自动在网络波动情况下重启反向代理服务：</p>
<ol>
<li>开启<code>NetworkManager-dispatcher.service</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now NetworkManager-dispatcher.service</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看网卡信息</li>
<li>在<code>/etc/NetworkManager/dispatcher.d/</code>目录创建脚本，推荐以<strong>数字开头</strong>命名，表示级别，比如<code>10-reverse-ssh-tunnel-dispatcher.sh</code>，编辑内容如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scripts under &#x27;/etc/NetworkManager/dispatcher.d/&#x27; will have </span></span><br><span class="line"><span class="comment"># two arguments ($1 and $2) which belong to the device or network interface</span></span><br><span class="line"><span class="comment"># and its status.</span></span><br><span class="line"></span><br><span class="line">DEVICE=<span class="variable">$&#123;1&#125;</span></span><br><span class="line">STATE=<span class="variable">$&#123;2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DEVICE</span>&quot;</span> = <span class="string">&quot;wlo1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$STATE</span>&quot;</span> = <span class="string">&quot;up&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">      systemctl restart reverse-ssh-tunnel.service</span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>这将会在网卡状态为<code>up</code>的情况下重启服务。当然，配置完成后重启<code>dispatcher</code>服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart NetworkManager-dispatcher.service</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SSH</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
